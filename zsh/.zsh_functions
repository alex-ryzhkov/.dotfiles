# Prevent ranger nested instances
ranger() {
    if [ -z "$RANGER_LEVEL" ]; then
        /usr/bin/ranger "$@"
    else
        exit
    fi
}

.df() {
    file_to_edit="$(find $DOTFILES -type f -not -path '*/\.git/*' | fzf)"
    result=$?
    if [ $result -eq 0 ]; then
        $EDITOR $file_to_edit
    fi
}

fd() {
    local dir
    dir=$(find -L ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
}

cf() {
    local file

    file="$(locate -Ai -0 $@ | grep -z -vE '~$' | fzf --read0 -0 -1)"

    if [[ -n $file ]]
    then
        if [[ -d $file ]]
    then
        cd -- $file
    else
        cd -- ${file:h}
        fi
    fi
}

fkill() {
    local pid
    if [ "$UID" != "0" ]; then
        pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
    else
        pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
    fi

    if [ "x$pid" != "x" ]
    then
        echo $pid | xargs kill -${1:-9}
    fi
}

lsg() {
    keyword=$(echo "$@" |  sed 's/ /.*/g')
    ls -hlA --color=yes \
    | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf(" %0o ",k);print}' \
    | grep -iE $keyword
}

# Run tmux by default when terminal is opened
run_tmux() {
    if [[ $DISPLAY ]]; then
        # If not running interactively, do not do anything
        [[ $- != *i* ]] && return
        [[ -z "$TMUX" ]] && exec tmux
    fi
}

ts() {
    if [ $# -eq 0 ]; then
        $MYTERM -e "tmux new-session"
    elif [ $# -eq 1 ]; then
        $MYTERM -e "tmux new-session -s $1"
    else
        echo ".zshrc ts(): Too many arguments"
    fi
}

ta() {
    if [ $# -eq 0 ]; then
        echo ".zsh_functions ta(): Specify a tmux session name to attach to"
    elif [ $# -eq 1 ]; then
        $MYTERM -e "tmux attach -t $1"
    else
        echo ".zsh_functions ta(): Too many arguments"
    fi
}
